import json
from bson.json_util import dumps

from dao import DAO

import pymongo
from pymongo import MongoClient


class DAO_db_community(DAO):

    def __init__(self, route="mongodb://localhost:27017"):
        super().__init__(route)
        self.mongo = MongoClient(self.route)
        self.db_communities = self.mongo.local.communities
        
    def getData(self):
        raise ValueError('Incorrect operation. Please use a specific method for the API request')

    def deleteCommunity(self, id):
        response = self.db_users.delete_one({'id':id})
        return response
         
    def addCommunity(self, community):
        response = self.db_communities.insert_one(community)
        return response

    def readCommunities(self):
        data = self.db_communities.find()
        return dumps(list(data))

    def readCommunity(self, id):
        data = self.db_communities.find({"id": id})
        return dumps(list(data))


    def addUserToCommunity(self, communityId, newUserId):
        response = self.db_communities.update_one(
        {"_id":id},
            {
                "$push": {
                    "users": newUserId
                }
            }
        );

    def updateCommunity(self, id, newCommunityJSON):
        response = self.deleteCommunity(id)
        response = self.addCommunity(newCommunityJSON)
        return response

    def updateName(self, id, newValue):
        response = self.db_communities.update_one(
        {"id":id},
            {
                "$set":{
                        "name":newValue
                }
            }
        )
        return response
    
    def updateExplanation(self, id, newValue):
        response = self.db_communities.update_one(
        {"id":id},
            {  
                "$set":{
                        "explanation":newValue
                }
            }
        )
        return response

    def updateFilter(self, filter, newValue):
        response = self.db_communities.update_one(
        {filter},
            {
                "$set":{
                        newValue
                }
            }
        )
        return response


    def close(self):
        self.mongo.close()


