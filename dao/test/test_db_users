import unittest
import json

import os, sys
currentdir = os.path.dirname(os.path.realpath(__file__))
parentdir = os.path.dirname(currentdir)
sys.path.append(parentdir)

from dao_db_users import DAO_db_users
from bson.json_util import dumps, loads 


class Test_db_users(unittest.TestCase):

    def setUp(self):
        self.dao = DAO_db_users()

    def tearDown(self):
        self.dao.drop()

    """
    an'ade un usuario en la db y despues lo lee. 
    despues compara el usuario que creo y el que recibio de la db
    """
    def test_addUser(self):
        user = {
                "id": "001",
                "gender":"F",
                "cars":["Ford", "BMW", "Fiat"]
                }
        self.dao.add(json.dumps(user))
        response = self.dao.readUser("001")
        self.assertEqual(response, user)

    """an'ade 2 usuarios, los lee y despues compara"""
    def test_readUsers(self):
        user1 = {"id": "001",}
        user2 = {"id": "002",}
        self.dao.add(json.dumps(user1))
        self.dao.add(json.dumps(user2))
        response = self.dao.readUsers()
        self.assertEqual(response, [user1, user2])

    """
    an'ade un usuario en la db, le cambia el id a '009' y despues lo lee.
    al final compara el id del usuario recibido con el '009'
    """
    def test_updateId(self):
        user = {
                "id": "001"
                }
        self.dao.add(json.dumps(user))
        self.dao.updateId("001", "009")
        response = self.dao.readUser("009")
        self.assertEqual(response.get("id"), "009")


    """
    an'ade un usuario en la db, lo elimina y lo intenta leer
    """
    def test_deleteUser(self):
        user = {
                "id": "001"
                }
        self.dao.add(json.dumps(user))
        self.dao.deleteUser("001")
        response = self.dao.readUser("001")
        self.assertEqual(response, {})


if __name__ == '__main__':
    unittest.main()